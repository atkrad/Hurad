<?php
App::uses('AppHelper', 'View/Helper');

/**
 * Class PluginFormHelper
 */
class PluginFormHelper extends AppHelper
{
    /**
     * List of helpers used by this helper
     *
     * @var array
     */
    public $helpers = ['Form'];

    /**
     * Plugin name
     *
     * @var string
     */
    public $pluginName;

    /**
     * Generates a form input element complete with label and wrapper div
     *
     * @param string $fieldName This should be "Modelname.fieldname"
     * @param array  $options   Each type of input takes different options.
     *
     * @return string Completed form widget.
     */
    public function input($fieldName, $options = array())
    {
        return $this->Form->input($this->getPrefixName($fieldName), $options);
    }

    /**
     * Returns a formatted LABEL element for HTML FORMs. Will automatically generate
     * a `for` attribute if one is not provided.
     *
     * @param string       $fieldName This should be "Modelname.fieldname"
     * @param string       $text      Text that will appear in the label field. If
     *                                $text is left undefined the text will be inflected from the
     *                                fieldName.
     * @param array|string $options   An array of HTML attributes, or a string, to be used as a class name.
     *
     * @return string The formatted LABEL element
     */
    public function label($fieldName = null, $text = null, $options = array())
    {
        return $this->Form->label($this->getPrefixName($fieldName), $text, $options);
    }

    /**
     * Creates a textarea widget.
     *
     * @param string $fieldName Name of a field, in the form "Modelname.fieldname"
     * @param array  $options   Array of HTML attributes, and special options above.
     *
     * @return string A generated HTML text input element
     */
    public function textarea($fieldName, $options = array())
    {
        return $this->Form->textarea($this->getPrefixName($fieldName), $options);
    }

    /**
     * Creates a checkbox input widget.
     *
     * @param string $fieldName Name of a field, like this "Modelname.fieldname"
     * @param array  $options   Array of HTML attributes.
     *
     * @return string An HTML text input element.
     */
    public function checkbox($fieldName, $options = array())
    {
        return $this->Form->checkbox($this->getPrefixName($fieldName), $options); // TODO: Change the autogenerated stub
    }

    /**
     * Creates a set of radio widgets. Will create a legend and fieldset
     * by default. Use $options to control this
     *
     * @param string $fieldName  Name of a field, like this "Modelname.fieldname"
     * @param array  $options    Radio button options array.
     * @param array  $attributes Array of HTML attributes, and special attributes above.
     *
     * @return string Completed radio widget set.
     */
    public function radio($fieldName, $options = array(), $attributes = array())
    {
        return $this->Form->radio($this->getPrefixName($fieldName), $options, $attributes);
    }

    /**
     * Creates a hidden input field.
     *
     * @param string $fieldName Name of a field, in the form of "Modelname.fieldname"
     * @param array  $options   Array of HTML attributes.
     *
     * @return string A generated hidden input
     */
    public function hidden($fieldName, $options = array())
    {
        return $this->Form->hidden($this->getPrefixName($fieldName), $options);
    }

    /**
     * Creates file input widget.
     *
     * @param string $fieldName Name of a field, in the form "Modelname.fieldname"
     * @param array  $options   Array of HTML attributes.
     *
     * @return string A generated file input.
     */
    public function file($fieldName, $options = array())
    {
        return $this->Form->file($this->getPrefixName($fieldName), $options);
    }

    /**
     * Get prefix name
     *
     * @param string $fieldName Original field name
     *
     * @return string
     */
    protected function getPrefixName($fieldName)
    {
        $this->setEntity($fieldName);

        $entityPathArray = explode('.', $this->_entityPath);

        $tmpNttPath = [];
        foreach ($entityPathArray as $nttPath) {
            if ($nttPath == $this->_association) {
                $tmpNttPath[] = $nttPath;
            } else {
                $tmpNttPath[] = $this->pluginName . '_' . $nttPath;
            }
        }

        return implode('.', $tmpNttPath);
    }
}